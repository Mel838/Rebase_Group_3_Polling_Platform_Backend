#!/usr/bin/env node

/**
 * Module dependencies.
 */

import app from "../app.js";
import createDebug from "debug";
import http from "http";
import { Server } from 'socket.io';
import { logger } from "../utils/logger.js";
import { initializeDatabase } from "../utils/database.js";
import { config } from "../config/env.js";

const debug = createDebug('real_time_polling:server');

/**
 * Get port from environment and store in Express.
 */

const port = config.port || process.env.PORT || 4000;
if (!port || isNaN(port)) {
  console.error('Invalid port configuration:', port);
  process.exit(1);
}
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Setup Socket.IO
 */
const io = new Server(server, {
  cors: {
    origin: ["http://localhost:4000", "https://frontendapp.vercel.app"],
    credentials: true
  }
});

app.set('socketio', io);

/**
 * Socket.IO events
 */
io.on('connection', (socket) => {
  logger.info(`Socket connected: ${socket.id}`);

  // Join session room
  socket.on('joinSession', (data) => {
    const { session_code } = data;
    socket.join(`session_${session_code}`);
    socket.emit('sessionJoined', { session_code });
    logger.info(`Socket joined session: ${session_code}`);
  });

  // Publish poll to session
  socket.on('publishPoll', (data) => {
    const { session_id, poll } = data;
    io.to(`session_${session_id}`).emit('newPoll', poll);
    logger.info(`Poll published to session: ${session_id}`);
  });

  // Submit poll response
  socket.on('submitResponse', (data) => {
    const { poll_id, response } = data;
    socket.emit('responseSubmitted', { poll_id, response });
    logger.info(`Response submitted for poll: ${poll_id}`);
  });

  socket.on('disconnect', () => {
    logger.info(`Socket disconnected: ${socket.id}`);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
console.log('Starting server on port:', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  try {
    await initializeDatabase();
    logger.info('Server listening on ' + bind);
    console.log('Server running on ' + bind);
  } catch (error) {
    logger.error('Database failed:', error);
    process.exit(1);
  }
  
  debug('Listening on ' + bind);
}